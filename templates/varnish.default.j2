  #
  # This is an example VCL file for Varnish.
  #
  # It does not do anything by default, delegating control to the
  # builtin VCL. The builtin VCL is called when there is no explicit
  # return statement.
  #
  # See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
  # and https://www.varnish-cache.org/trac/wiki/VCLExamples for more examples.

  # Marker to tell the VCL compiler that this VCL has been adapted to the
  # new 4.0 format.
  vcl 4.0;
  import std;
  import directors;

  # Default backend definition. Set this to point to your content server.
  #Specify the first server backend.

  {% for server in groups['app'] %}
    backend Server{{ loop.index }} {
      .host = "{{ server }}";
      .port = "80";
    }
  {% endfor %}

  sub vcl_init {
    new cluster1 = directors.round_robin();
    {% for server in groups['app'] %}
      cluster1.add_backend(Server{{ loop.index }});
    {% endfor %}

  }


sub vcl_recv {
       set req.backend_hint = cluster1.backend();
        if (req.http.x-forwarded-for) {
      set req.http.X-Forwarded-For =
      req.http.X-Forwarded-For + ", " + client.ip;
      #set req.http.X-Forwarded-For = client.ip;
        } else {
      set req.http.X-Forwarded-For = client.ip;
        }
  if (req.method != "GET" &&
  req.method != "HEAD" &&
  req.method != "PUT" &&
  req.method != "POST" &&
  req.method != "TRACE" &&
  req.method != "OPTIONS" &&
  req.method != "DELETE") {
    return (pipe);
  }
if (req.method == "POST") {
    return (pipe);
  }   // Never cache these pages

    if (req.url ~ "^/customer/" ||
        req.url ~ "^/checkout/" ||
        req.url ~ "^/admin/") {
            return (pass);
    }

       if (req.url ~ "(?i)\.(jpeg|jpg|png|gif|ico|swf|js|css|gz|rar|txt|bzip)$") {
          unset req.http.Cookie;
          return (hash);
       } else {
          return (pass);
       }
  }
  sub vcl_backend_response {
    if (beresp.http.Set-Cookie) {
      set beresp.http.X-Varnish-Set-Cookie = beresp.http.Set-Cookie;
    }
  }


  sub vcl_deliver {
  # Happens when we have all the pieces we need, and are about to send the
  # response to the client.
  #
  # You can do accounting or modifying the final object here.
  }

